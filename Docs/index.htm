<html>
<head><title>Noise Tool Docs</title></head>
<body>

<p><img src="mxl.jpg"><img src="title.jpg"></p>
<p>MadoxLabs Noise Tool - A GUI for visualizing noise
</p>
<p>Noise Tool is a visualizer for the LibNoise library. Noise modules can be created and interconnected with the outputs drawn in bitmap windows. Noise parameters can be changed and the output bitmaps will reflect the new settings.  
</p>
<p>Known problems:
</p><ul><li>some WinXP machines may find the app doesn't draw all of its menus correctly. Try making sure you have the latest .Net v4 installed.</li></ul>
<pre> MadoxLabs 2012
 madoxlabs@gmail.com
 http://madox.ca
 http://github.com/MadoxLabs/NoiseTool
</pre>

<hr />
<p>NoiseTool is a front end for the LibNoise library that let you manipulate noise modules and view their output in realtime, bu connecting outputs to sources. It can apply colour gradients to the data to create bitmap image representations, much like the original noise library utils can do. </p>
<p>I use this noise library a lot to create heightmaps, voxel maps and procedural textures, and I got tired of playing with numbers in code and not really getting to see what it is that the numbers are doing without rendering the whole scene in game. I created this tool to help me see exactly what types of images I will get, if certain noise modules are connected a certain way.</p>
<br />
<h1 class="instapaper_title">Noise modules</h1>
<p>Here is an overview of the different modules that are available and their parameters. For more details, see the LibNoise website. These examples show typical outputs, not necessarily using the default values.</p>

<h1>Noise Generators</h1>

<h3>Billow</h3>
<p><img src="billow.png"></p>

<h3>Perlin</h3>
<p><img src="perlin.png"></p>

<h3>Ridged Multifractal</h3>
<p><img src="ridged.png"></p>

<h3>Voronoi</h3>
<p>I don't really understand Voronoi, so play with it yourself.<br><img src="voronoi.png"></p>

<p><strong>Parameters</strong><br>
Quality - 1, 2, or 3. Higher is better.<br>
Octaves - controls how much fine details are drawn. At low resolutions, you may not be able to see the fine detail at all.<br>
Frequency - This works like a zoom in/zoom out factor. Higher numbers mean more zoomed out.<br>
Persistance - Between 0 and 0.5 acts like a blur factor. Above 0.5 acts like a fader.<br>
Lacunarity - This parameter also acts as a cross between a blur factor and fine detail factor.</p>

<h1>Other Generators</h1>

<h3>Checkerboard</h3>

<p><img src="checker.png"></p>

<h3>Constant</h3>

<p><img src="constant.png"><br><strong>Parameters</strong><br>
Value - every point in the image will be set to this value</p>

<h3>Cylinders</h3>

<p><img src="cylinder.png"></p>

<h3>Spheres</h3>

<p><img src="spheres.png"><br>
draws concentric spheres centered at 0,0,0<br><strong>Parameters</strong><br>
Frequency - This works like a zoom in/zoom out factor. Higher numbers mean more zoomed out.  </p>

<h3>Gradient</h3>

<p><img src="gradient.png"><br>
draws a linear gradient in input range 0 -&gt; 1<br><strong>Parameters</strong><br>
Axis - value 1, 2, 3 corresponds to X,Y,Z axis<br>
Lower - value of the lower end of the gradient<br>
Upper - value of the upper end of the gradient  </p>

<h1>In Modifiers</h1>

<p>In modifiers take the (x,y,z) input parameter and alters it somehow before passing it to the noise generator.</p>

<p><img src="inmodifiers.png"></p>

<h3>Turbulence</h3>

<p>Uses a perlin noise generator to get values used to jostle the input parameter
<strong>Parameters</strong><br>
Power - a multiplier that determines how much the turbulence is factored in<br>
Roughness - how much fine details are in the turbulence, higher is finer<br>
Frequency - Higher value is more severe turbulence  </p>

<h3>Displace</h3>

<p>Displace works like turbulence but uses other noise modules as the sources to get the jostling value from. This module takes the source module and 3 displacement modules. You can leave a displace module empty for no displacement.</p>

<h3>Invert</h3>

<h3>Rotate</h3>

<h3>Translate</h3>

<h1>Out Modifiers</h1>

<p>Out modifiers alter the resulting noise value generated by a noise module.  </p>

<p><img src="outmodifiers.png"></p>

<h3>Absolute</h3>

<p>Takes the absolute value  </p>

<h3>Clamp</h3>

<p><strong>Parameters</strong><br>
Lower - all values lower than this value are set to this value
Upper - all values higher than this value are set to this value</p>

<h3>Exponent</h3>

<p><strong>Parameters</strong><br>
Exponent - The output value is raised to this power.</p>

<h3>Inverse</h3>

<h3>ScaleBias</h3>

<p><strong>Parameters</strong><br>
Scale - all values are multiplied by this value
Bias - This value is added to all values</p>

<h3>Cache</h3>

<p>Cache is a special module that will store the last value generated and return that instead of recalculating it. This is useful if you have one module feeding into another module multiple times.</p>

<h1>Combiners</h1>

<p>Combiners take two of more modules and combine the outputs into one output using various methods.</p>

<p><img src="combines.png"></p>

<h3>Add</h3>

<h3>Max</h3>

<h3>Min</h3>

<h3>Multiply</h3>

<h3>Power</h3>

<p>Raises the output of one module to the corresponding power coming from the other module.</p>

<p><img src="blends.png"></p>

<h3>Blend</h3>

<p>Blend takes as input 2 source modules and blends them according to the blend factor coming from a third module.</p>

<h3>Select</h3>

<p>Select works much the same as blend, but instead of the third module being a blend factor, the third module determine when to take source A, and when to take source B.</p>

<p><strong>Parameters</strong><br>
Edge Falloff - makes the transition between sources softer<br>
UpperBound - control values above this parameter indicate that source B should be used<br>
LowerBound - control values below this parameter indicate that source B should be used  </p>

<h1 class="instapaper_title">Manipulating modules</h1>

      <p><img src="menu.png"><br>
Create a noise module by clicking on one of the module types in the top menu. A module widow will appear in the work area.</p>

<p><img src="window.png"><br>
Before using a module, you have to select its type from the module selector. The window can be resized from the corner, and moved by clicking anywhere and dragging. The top right corner is the close button.</p>

<p><img src="linking.png"><br>
When a module type is selected, input and output links will appear. Hover over these to see what they mean. By clicking on a link, you can begin creating a linkage line. Click on another module's link to complete the line. Right clicking on a link will erase that line. Click on the work area to cancel creating a line. One output link can be linked multiple times to input links.</p>

<p><img src="bounds.png"><br>
Each window will display the values from its noise module over a given boundary. No matter what size the window is, the noise display will always cover this same boundary region. This lets you enlarge a window to see finer details, or shrink a window to avoid slowing down your computer while you work. Computing and displaying the images take a lot of CPU time. </p>

<p><img src="linking2.png"><br>
Right clicking on a module will also disable its display entirely. This has no effect on modules that use it as input. </p>

<p><img src="params.png"><br>
When you click on a module, you will see its noise parameters and output range. Whenever parameters are changed, you must click the Update button. Computing and displaying the images take a lot of CPU time so it is not done on the fly.  The Range output displays the range of values that appear in the noise image. This is handy to know when setting up gradients.</p>

<p><img src="params2.png"><br>
Some parameters can be changed to text entry fields by right clicking the parameter name.</p>


<h1 class="instapaper_title">Viewing the output</h1>

      <h2>Gradients</h2>

<p><img src="gradient1.png"><br>
Gradients are used to colourize the noise values displayed in a module window. By default there is a greyscale gradient that outputs shades of grey for values ranging from 0 to 1. You can change and add gradients using the Edit button.</p>

<p>The gradient selected here will be the one that is used for all new modules. Changing a gradient in the editor will update all module windows that are using that gradient.</p>

<p><img src="gradient2.png"><br>
Select a gradient to edit using the gradient list. The New button will add a new gradient. You can enter the name of the new gradient before or after pressing New. The App Point button adds a colour to a certain noise value. By default, new gradients have no points. </p>

<p><img src="gradient3.png"><br>
The list of points includes each point's colour and value. The gradient sample along the right side shows the linear interpolation of colours between the defined points. Use the X button to the left of the point value to remove a point.</p>

<h2>Extras</h2>

<p><img src="extra1.png"><br>
The noise image being output by a module can be manipulated using the Extras menu. Click on the border button at the bottom of a module window to access the Extras menu.</p>

<p><img src="extra2.png"><br>
The normalize option scales all the output values into the range 0 to 1. Normally, modules tend to output in the range -1 to 1, and if you have a large chain of modules, the output range can be anything. If you need the values on the 0 to 1 scale, use normalize. This will not affect modules using this module as an input, it only alters the display image.</p>

<p><img src="extra3.png"><br>
The shadow option will add shadows to the image, treating it like a heightmap. New shadow parameters will also appear to control the type of shadows being added. This will not affect modules using this module as an input, it only alters the display image.</p>

<p><img src="extra4.png"><br>
The tile option will make sure that the edges of the output image wrap, making the image suitable for texture tiling. The tiling algorithm is one that I came up with on my own but I think the results are pretty ok. This WILL affect modules using this module as an input.</p>

<p><img src="extra5.png"><br>
Some noise modules depend on a random seed to get their algorithms going. Clicking new seed will cause the module to create an entirely new output, if supported. This WILL affect modules using this module as an input.</p>

<p><img src="extra6.png"><br>
The save button will output a square image file using the resolution in the save textbox. </p>

<p><img src="extra7.png"><br>
The gradient selector lets you pick which gradient is used by this module.</p>

  <h1 class="instapaper_title">Examples</h1>

        <p>Here are some examples of things I did during development.</p>

<p><img src="image1.jpg"><br>
This image shows the first time I tried interconnecting a bunch of modules. The result is pretty amazing, and didn't take many modules.</p>

<p><img src="image2.jpg"><br>
The libnoise website has a terrain generation tutorial, and this shows me following along.</p>

<p><img src="image3.jpg"><br>
An attempt at creating a woodgrain texture.</p>

<p><img src="image4.jpg"><br>
Testing the caching module resulted in some really amazing art.</p>

<p><img src="image5.jpg"><br>
After adding a shadowing function, to bring out the detail of heightmaps, I revisited the terrain tutorial.
This image shows before (left side) and after (right side)</p>

  <h1 class="instapaper_title">Credits</h1>

        <p>NoiseTool wouldn't be possible without help from:</p>

<blockquote>
<p>LibNoise<br>
Jason Bevin 2007<br><a href="http://libnoise.sourceforge.net">http://libnoise.sourceforge.net</a>  </p>
</blockquote>

<p>The original libnoise library, which was written in C++ and I ported to C# for this project.</p>

<blockquote>
<p>WPF Color Picker<br>
Ury Jamshy 2011<br><a href="http://www.codeproject.com/Articles/229442/WPF-Color-Picker-VS2010-Style">http://www.codeproject.com/Articles/229442/WPF-Color-Picker-VS2010-Style</a>    </p>
</blockquote>

<p>Ury's amazing colour picker widget that I found out in the wild. Probably saved me weeks of work, and is entirely responsible for NoiseTool supporting colour gradients at all.</p>
</body>
</html>
